type Post {
    id: ID!
    title: String!
    description: String!
    user: User! @belongsTo
    created_at: DateTime!
    updated_at: DateTime!
    type: PostType!
}

enum PostType {
  NEWS @enum(value: 1)
  GAMES @enum(value: 2)
  BLOG @enum(value: 3)
}

input CreatePostInput {
  title: String!
  description: String!
  type: String
  user: CreateUserBelongsTo
}

input CreateUserBelongsTo {
  connect: ID
  create: CreateUserInput
}

input CreateUserInput {
  name: String! @rules(apply: ["required", "min: 4"])
  email: String! @rules(apply: ["email", "unique:users"])
  password: String! @rules(apply: ["min:4"])@bcrypt
}

# update post
input UpdatePostInput {
  id: ID!
  title: String
  user: UpdateUserBelongsTo
}

input UpdateUserBelongsTo {
  connect: ID
  create: CreateUserInput
  update: UpdateUserInput
  upsert: UpdateUserInput
  disconnect: Boolean
  delete: Boolean
}

input UpdateUserInput {
  name: String!
}

extend type Query {
    posts: [Post!]! @all
    post(id: ID @eq): Post @find
}

extend type Mutation {
    updatePost(input: UpdatePostInput! @spread): Post @update
}

extend type Mutation {
    createPost(input: CreatePostInput! @spread): Post @create
}
